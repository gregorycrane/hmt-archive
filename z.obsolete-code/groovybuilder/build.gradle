// hmtarchive project

apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"

apply from: "${projectDir}/confs/versions.gradle"


if (project.hasProperty('conf')) {
    System.err.print "Using configuration data from ${conf}"
    File confFile = new File(conf)
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    } else {
        apply from: conf
    }

} else {
    File confFile = new File("${projectDir}/confs/conf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${confFile} found.")
    } else {
        println "Using default configuration in 'confs/conf.gradle'"
        apply from: "${projectDir}/confs/conf.gradle"
    }
}

if (project.hasProperty("nightly")) {
    projectVersion = "${new Date().format('yyyy-MM-dd')}".toString()
}

/*

buildscript {
  //apply from: "${projectDir}/confs/versions.gradle"
  repositories {
    mavenCentral()
    maven  {
      url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
  }
  dependencies {
    classpath project(":hmtmgr")
  }
}
*/

allprojects {
  apply from: "${rootProject.rootDir}/confs/versions.gradle"
  group = "org.homermultitext"
  version = projectVersion

  task vmap << { task ->
    println "\nDependencies for ${version} in ${task.project.name}:"
    versionMap.keySet().sort().each { k ->
      print k
      Integer spaces = 15 - k.size()
      Integer idx = 0
      while(idx < spaces) {
	print " "
	idx++
	  }
      println versionMap[k]
    }
    println ""
  }
}

subprojects {
  /*
  apply plugin: "java"
  apply plugin: "groovy"
  repositories {
    mavenCentral()
    maven  {
      url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
  }
  dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: "2.0.6"
    compile group: "commons-io", name: "commons-io", version: "2.4"
    compile group: 'org.homermultitext', name : 'hmt-utils' , version: versionMap["hmtutils"]
    compile group: 'edu.harvard.chs', name : 'cite' , version: versionMap["cite"]
  }
  */
}




task hmt ( dependsOn: ["textmgr:ctstab", "citebldr:cite"]) {
  description = "Assemble HMT publication."
}

hmt.doLast {
  println "\n\nBuilt the HMT."
}




task checker (dependsOn: ":citebldr:cite") {
  doLast {
    println "Needed to run CITE task!"
  }
}
